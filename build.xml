<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="Stock Market Porfolio" default="all" basedir=".">
	<property file="build.properties"/>

    <property name="src.dir" value="src" description="project source code"/>
    <property name="lib.dir" value="lib" description="project libraries are found here"/>
    <property name="build.dir" value="build"
              description="anything this build script generates goes under this directory"/>
    <property name="classes.dir" value="${build.dir}${file.separator}classes"
        	  description="Java class files compiled by this build script go here"/>  
            
    <property name="report.dir" value="${build.dir}${file.separator}report"
              description="this directory is used by JUnit. Test results are placed here in a nice HTML format"/>
              
    <!-- Deployment properties -->
    <property name="web.dir"   value="web"/>
    <property name="dist.dir"  value="dist"/>         
          
                   
	<!-- Set up JAVA_HOME and CATALINA_HOME system wide environment variables, and
			may use the following three lines to set jdk.home and tomcat.home 
	-->
	<property environment="env"/> 
	<property name="jdk.home" location="${env.JAVA_HOME}"/>  <!-- need this? -->
	<property name="tomcat.home" location="${env.CATALINA_HOME}"/> 
				
	<property name="tomcat.deploy" value="${tomcat.home}${file.separator}webapps"/>
	
	<!-- Use local copy of servlet-api.jar if Tomcat is not installed -->
	<property name="tomcat.lib" value="${lib.dir}"/>
	<!-- <property name="tomcat.lib" value="${tomcat.home}${file.separator}lib"/> -->
	<property name="servletjar" value="${tomcat.lib}${file.separator}servlet-api.jar"/>
	
	<property name="webapp.name" value="${appname}" description="application name"/>


    <!-- this sets up the classpath for the project. Whenever you a .jar to the lib directory it will automatically be
        be added to the classpath
    -->
    <path id="project.classpath" description="the project's class path all third party libs are on it. ">
        <pathelement location="${classes.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${servletjar}"/>
    </path>


    <!-- targets follow - each target does one thing in the compile, run, test and build process -->

    <target name="clean" description="deletes all build artifacts (anything created by this build file)">
        <delete dir="${classes.dir}"/>
        <delete dir="${report.dir}"/>
        <delete dir="${build.dir}"/>
		<delete dir="${dist.dir}" />
		<delete dir="${webapp.context.dir}" />
		<delete file="${tomcat.deploy}${file.separator}${webapp.name}.war"/>
    </target>

    <target name="init" description="Build initialization - create output directories" depends="clean">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${report.dir}"/>
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${tomcat.deploy}"/>
    </target>

    <target name="compile" description="Compile all the code; produce classes" depends="init">
        <javac destdir="${classes.dir}" debug="true" fork="true" srcdir="${src.dir}">
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <target name="test" description="Runs all the JUnit tests and generates the test results report" depends="compile">

        <junit printsummary="yes" haltonfailure="false" showoutput="true" failureproperty="test_failure">
            <classpath refid="project.classpath"/>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${classes.dir}">
                    <include name="**/*Test*.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>

        <!-- if a test fails then the property  "test_failure" will be set and we fail now.
         Failng now, rather than when the test actually failed allows all the tests to complete and the report
         to be generated. 
         -->
        <fail if="test_failure" message="At least one JUnit test failed. Please see report."/>

    </target>
    
     
	<!-- WAR rules -->
	<target name="war" depends="compile">
		<echo>building war...</echo>
		<war warfile="${dist.dir}${file.separator}${webapp.name}.war" webxml="${web.dir}${file.separator}WEB-INF${file.separator}web.xml">
			<fileset dir="${web.dir}">
      			<patternset>
        			<exclude name="**/WEB-INF/web.xml"/>
					<exclude name="**/WEB-INF/jboss-web.xml"/>
					<include name="**/*.html"/>
					<include name="**/*.jpg"/>
					<include name="**/*.gif"/>
					<include name="**/*.jsp"/>
					<exclude name="**/*.java"/>
        		</patternset>
      		</fileset>
			<fileset dir="${src.dir}">
				<include name="**/*.jsp"/>
				<include name="**/*.html"/>
			</fileset>
      		<classes dir="${classes.dir}"/>
      		<lib dir="${lib.dir}"/>
		</war>
	</target>
	
	<!-- Deployment rule -->
	<target name="deploy" depends="war">
		<echo>copying war file to deployment dir...</echo>
		<copy file="${dist.dir}${file.separator}${webapp.name}.war" todir="${tomcat.deploy}" 
			overwrite="true"/>
	</target>
	
    <!-- this is the default target - it does everything -->
    <target name="all" depends="init, clean, compile, test"
            description="deletes previous work, compiles new class, runs hello program"/>

</project>